/* tslint:disable */
/* eslint-disable */
/**
 * ExerciseApi
 * A web API for getting info about exercises and workouts
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: chlaferney@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Equipment,
    EquipmentFromJSON,
    EquipmentToJSON,
    Exercise,
    ExerciseFromJSON,
    ExerciseToJSON,
    ExerciseInstruction,
    ExerciseInstructionFromJSON,
    ExerciseInstructionToJSON,
    InlineResponse400,
    InlineResponse400FromJSON,
    InlineResponse400ToJSON,
    MuscleGroup,
    MuscleGroupFromJSON,
    MuscleGroupToJSON,
} from '../models';

export interface ExerciseGetExerciseRequest {
    exerciseId: number;
}

export interface ExerciseGetExerciseInstructionRequest {
    exerciseId: number;
}

export interface ExerciseGetExercisesRequest {
    limit?: number;
    offset?: number;
    search?: string;
    muscleGroups?: Array<MuscleGroup>;
    equipment?: Array<Equipment>;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Retrieve a specific exercise by id
     */
    async exerciseGetExerciseRaw(requestParameters: ExerciseGetExerciseRequest): Promise<runtime.ApiResponse<Exercise>> {
        if (requestParameters.exerciseId === null || requestParameters.exerciseId === undefined) {
            throw new runtime.RequiredError('exerciseId','Required parameter requestParameters.exerciseId was null or undefined when calling exerciseGetExercise.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/exercises/{exerciseId}`.replace(`{${"exerciseId"}}`, encodeURIComponent(String(requestParameters.exerciseId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExerciseFromJSON(jsonValue));
    }

    /**
     * Retrieve a specific exercise by id
     */
    async exerciseGetExercise(requestParameters: ExerciseGetExerciseRequest): Promise<Exercise> {
        const response = await this.exerciseGetExerciseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve instruction for an exercise by id
     */
    async exerciseGetExerciseInstructionRaw(requestParameters: ExerciseGetExerciseInstructionRequest): Promise<runtime.ApiResponse<ExerciseInstruction>> {
        if (requestParameters.exerciseId === null || requestParameters.exerciseId === undefined) {
            throw new runtime.RequiredError('exerciseId','Required parameter requestParameters.exerciseId was null or undefined when calling exerciseGetExerciseInstruction.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/exercises/{exerciseId}/instruction`.replace(`{${"exerciseId"}}`, encodeURIComponent(String(requestParameters.exerciseId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExerciseInstructionFromJSON(jsonValue));
    }

    /**
     * Retrieve instruction for an exercise by id
     */
    async exerciseGetExerciseInstruction(requestParameters: ExerciseGetExerciseInstructionRequest): Promise<ExerciseInstruction> {
        const response = await this.exerciseGetExerciseInstructionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a list of exercises
     */
    async exerciseGetExercisesRaw(requestParameters: ExerciseGetExercisesRequest): Promise<runtime.ApiResponse<Array<Exercise>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.muscleGroups) {
            queryParameters['muscle_groups'] = requestParameters.muscleGroups.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.equipment) {
            queryParameters['equipment'] = requestParameters.equipment.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/exercises`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExerciseFromJSON));
    }

    /**
     * Get a list of exercises
     */
    async exerciseGetExercises(requestParameters: ExerciseGetExercisesRequest): Promise<Array<Exercise>> {
        const response = await this.exerciseGetExercisesRaw(requestParameters);
        return await response.value();
    }

}
